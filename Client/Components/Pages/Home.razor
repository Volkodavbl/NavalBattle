@using Microsoft.AspNetCore.SignalR.Client
@using Domain.Entities
@using Services
@using Client.Components.Shared
@rendermode InteractiveServer
@implements IDisposable

@page "/"
@inject HubConnection hubConnection;
@inject ClientService clientService;
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<PageTitle>NavalBattle</PageTitle>

<h1>Играть в NavalBattle</h1>

<label for="login">Логин: </label>
<InputText id="login" @bind-Value="roomRegister!.Login"></InputText>
<button class="btn btn-primary" @onclick="Login">Войти</button>


@if (isAuthorized)
{
    <RoomList></RoomList>
    <EditForm Model="@roomRegister" OnValidSubmit="@CreateRoom">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label for="roomName">Название комнаты: </label>
        <InputText id="roomName" @bind-Value="roomRegister!.RoomName"></InputText>
        <button class="btn btn-primary" type="submit">Создать комнату</button>
    </EditForm>
}


@code {
    public bool isAuthorized = false;

    public class RoomRegister
    {
        [Required]
        public string? Login { get; set; }
        [Required]
        public string? RoomName { get; set; }
    }

    [SupplyParameterFromForm]
    public RoomRegister? roomRegister { get; set; }

    private void ErrorMethod(string message)
    {
        isAuthorized = false;
        Console.WriteLine("ERRRORRRRRRRRRRRRRRRRRRRRR" + message);
        InvokeAsync(StateHasChanged);
        // await JsRuntime.InvokeVoidAsync("alert", message);
    }

    protected override void OnInitialized()
    {
        clientService.ErrorOcured += (message) => ErrorMethod(message);
        roomRegister ??= new();
    }

    public void Dispose()
    {
        clientService.ErrorOcured -= ErrorMethod;
    }

    private void CreateRoom()
    {
        hubConnection.On<Domain.Entities.Room>("ShowRoom", clientService.ShowRoom);
        hubConnection.SendAsync("CreateRoom", roomRegister!.RoomName);
        Navigation.NavigateTo("/room");
    }

    private void Login()
    {
        isAuthorized = true;
        hubConnection.On<string>("Error", clientService.Error);
        Console.WriteLine("LOGIIIIIIIIIIIIIIIIIIIIIN");
        hubConnection.SendAsync("LoginUser", roomRegister!.Login!);
    }

}